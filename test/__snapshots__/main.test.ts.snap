// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "CheckFuncArn": Object {
      "Description": "arn of checker func",
      "Value": Object {
        "Fn::GetAtt": Array [
          "checker31A6B3BF",
          "Arn",
        ],
      },
    },
    "authorizeapiEndpointF688FB65": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "authorizeapi88058282",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "authorizeapiDeploymentStagev1E36C01E1",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ContestTableCF479330": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "pk",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "ContributorInsightsSpecification": Object {
          "Enabled": true,
        },
        "KeySchema": Array [
          Object {
            "AttributeName": "pk",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DynamodbPlan329A6CBF": Object {
      "Properties": Object {
        "BackupPlan": Object {
          "BackupPlanName": "DynamodbPlan",
          "BackupPlanRule": Array [
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 35,
              },
              "RuleName": "Daily",
              "ScheduleExpression": "cron(0 5 * * ? *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 90,
              },
              "RuleName": "Weekly",
              "ScheduleExpression": "cron(0 5 ? * SAT *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 1825,
                "MoveToColdStorageAfterDays": 90,
              },
              "RuleName": "Monthly5Year",
              "ScheduleExpression": "cron(0 5 1 * ? *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::Backup::BackupPlan",
    },
    "DynamodbPlanSelection09103638": Object {
      "Properties": Object {
        "BackupPlanId": Object {
          "Fn::GetAtt": Array [
            "DynamodbPlan329A6CBF",
            "BackupPlanId",
          ],
        },
        "BackupSelection": Object {
          "IamRoleArn": Object {
            "Fn::GetAtt": Array [
              "DynamodbPlanSelectionRole973F0954",
              "Arn",
            ],
          },
          "Resources": Array [
            Object {
              "Fn::GetAtt": Array [
                "ContestTableCF479330",
                "Arn",
              ],
            },
          ],
          "SelectionName": "Selection",
        },
      },
      "Type": "AWS::Backup::BackupSelection",
    },
    "DynamodbPlanSelectionRole973F0954": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "backup.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DynamodbPlanVault6847869F": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BackupVaultName": "testDynamodbPlanVault7182E339",
      },
      "Type": "AWS::Backup::BackupVault",
      "UpdateReplacePolicy": "Retain",
    },
    "authorization66B327D8": Object {
      "DependsOn": Array [
        "authorizationServiceRoleDefaultPolicy45D373DE",
        "authorizationServiceRole86C5D4FE",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "beac0921989dfc4d78a15a22459cb5f23cc26797db5f2bf58da9c70cdec8eefd.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "CHECKER_FUNC_ARN": Object {
              "Fn::GetAtt": Array [
                "checker31A6B3BF",
                "Arn",
              ],
            },
            "TABLE": Object {
              "Ref": "ContestTableCF479330",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "authorizationServiceRole86C5D4FE",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "authorizationServiceRole86C5D4FE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "authorizationServiceRoleDefaultPolicy45D373DE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ContestTableCF479330",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "authorizationServiceRoleDefaultPolicy45D373DE",
        "Roles": Array [
          Object {
            "Ref": "authorizationServiceRole86C5D4FE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "authorizeapi88058282": Object {
      "Properties": Object {
        "Name": "authorize-api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "authorizeapiAccount69EA301F": Object {
      "DependsOn": Array [
        "authorizeapi88058282",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "authorizeapiCloudWatchRoleA6822FA4",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "authorizeapiAuthorizationRequestModel9944C055": Object {
      "Properties": Object {
        "ContentType": "application/json",
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
        "Schema": Object {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "properties": Object {
            "account": Object {
              "type": "string",
            },
            "eventId": Object {
              "type": "string",
            },
            "nickname": Object {
              "type": "string",
            },
          },
          "required": Array [
            "account",
            "eventId",
            "nickname",
          ],
          "type": "object",
        },
      },
      "Type": "AWS::ApiGateway::Model",
    },
    "authorizeapiCloudWatchRoleA6822FA4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "authorizeapiDeploymentD39EC26005facae0f40c4e04b4e32a37097560b7": Object {
      "DependsOn": Array [
        "authorizeapiAuthorizationRequestModel9944C055",
        "authorizeapiauthorizePOSTD50942C1",
        "authorizeapiauthorizeD2D5F32E",
        "authorizeapivalidator68BE6F9D",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "authorizeapiDeploymentStagev1E36C01E1": Object {
      "DependsOn": Array [
        "authorizeapiAccount69EA301F",
      ],
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "authorizeapiDeploymentD39EC26005facae0f40c4e04b4e32a37097560b7",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
        "StageName": "v1",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "authorizeapiauthorizeD2D5F32E": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "authorizeapi88058282",
            "RootResourceId",
          ],
        },
        "PathPart": "authorize",
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "authorizeapiauthorizePOSTApiPermissionTesttestauthorizeapi08096DA5POSTauthorize2CE5D888": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "authorization66B327D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "authorizeapi88058282",
              },
              "/test-invoke-stage/POST/authorize",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "authorizeapiauthorizePOSTApiPermissiontestauthorizeapi08096DA5POSTauthorizeB0C429CD": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "authorization66B327D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "authorizeapi88058282",
              },
              "/",
              Object {
                "Ref": "authorizeapiDeploymentStagev1E36C01E1",
              },
              "/POST/authorize",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "authorizeapiauthorizePOSTD50942C1": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "authorization66B327D8",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestModels": Object {
          "application/json": Object {
            "Ref": "authorizeapiAuthorizationRequestModel9944C055",
          },
        },
        "RequestValidatorId": Object {
          "Ref": "authorizeapivalidator68BE6F9D",
        },
        "ResourceId": Object {
          "Ref": "authorizeapiauthorizeD2D5F32E",
        },
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "authorizeapivalidator68BE6F9D": Object {
      "Properties": Object {
        "RestApiId": Object {
          "Ref": "authorizeapi88058282",
        },
        "ValidateRequestBody": true,
      },
      "Type": "AWS::ApiGateway::RequestValidator",
    },
    "checker31A6B3BF": Object {
      "DependsOn": Array [
        "checkerServiceRoleDefaultPolicyF32E024F",
        "checkerServiceRoleEA757245",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "109f17bb6693a3588fd096ce2b2039bb4c53d7d0e1d1d5926374d263daf0d31b.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_INDEX_NAME": "event",
            "TABLE": Object {
              "Ref": "ContestTableCF479330",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "ReservedConcurrentExecutions": 10,
        "Role": Object {
          "Fn::GetAtt": Array [
            "checkerServiceRoleEA757245",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "checkerServiceRoleDefaultPolicyF32E024F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ContestTableCF479330",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "checkerServiceRoleDefaultPolicyF32E024F",
        "Roles": Array [
          Object {
            "Ref": "checkerServiceRoleEA757245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "checkerServiceRoleEA757245": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "checkerapigatewayE7DC5CA4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "checker31A6B3BF",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
