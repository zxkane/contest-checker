// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "CheckFuncArn": Object {
      "Description": "arn of checker func",
      "Value": Object {
        "Fn::GetAtt": Array [
          "checker31A6B3BF",
          "Arn",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ContestTableCF479330": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "pk",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "ContributorInsightsSpecification": Object {
          "Enabled": true,
        },
        "KeySchema": Array [
          Object {
            "AttributeName": "pk",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
        "StreamSpecification": Object {
          "StreamViewType": "NEW_IMAGE",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DynamodbPlan329A6CBF": Object {
      "Properties": Object {
        "BackupPlan": Object {
          "BackupPlanName": "DynamodbPlan",
          "BackupPlanRule": Array [
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 35,
              },
              "RuleName": "Daily",
              "ScheduleExpression": "cron(0 5 * * ? *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 90,
              },
              "RuleName": "Weekly",
              "ScheduleExpression": "cron(0 5 ? * SAT *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
            Object {
              "Lifecycle": Object {
                "DeleteAfterDays": 1825,
                "MoveToColdStorageAfterDays": 90,
              },
              "RuleName": "Monthly5Year",
              "ScheduleExpression": "cron(0 5 1 * ? *)",
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "DynamodbPlanVault6847869F",
                  "BackupVaultName",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::Backup::BackupPlan",
    },
    "DynamodbPlanSelection09103638": Object {
      "Properties": Object {
        "BackupPlanId": Object {
          "Fn::GetAtt": Array [
            "DynamodbPlan329A6CBF",
            "BackupPlanId",
          ],
        },
        "BackupSelection": Object {
          "IamRoleArn": Object {
            "Fn::GetAtt": Array [
              "DynamodbPlanSelectionRole973F0954",
              "Arn",
            ],
          },
          "Resources": Array [
            Object {
              "Fn::GetAtt": Array [
                "ContestTableCF479330",
                "Arn",
              ],
            },
          ],
          "SelectionName": "Selection",
        },
      },
      "Type": "AWS::Backup::BackupSelection",
    },
    "DynamodbPlanSelectionRole973F0954": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "backup.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DynamodbPlanVault6847869F": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BackupVaultName": "testDynamodbPlanVault7182E339",
      },
      "Type": "AWS::Backup::BackupVault",
      "UpdateReplacePolicy": "Retain",
    },
    "SubmissionNotifyTopic31317A4E": Object {
      "Properties": Object {
        "DisplayName": "Contest Sbumission Notification subscription topic",
      },
      "Type": "AWS::SNS::Topic",
    },
    "checker31A6B3BF": Object {
      "DependsOn": Array [
        "checkerServiceRoleDefaultPolicyF32E024F",
        "checkerServiceRoleEA757245",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "a09c4ddc917bc6f1d93d3e65138750807e6ecabe0e6b71ed1a22c3e3f71e1309.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_INDEX_NAME": "event",
            "TABLE": Object {
              "Ref": "ContestTableCF479330",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "ReservedConcurrentExecutions": 10,
        "Role": Object {
          "Fn::GetAtt": Array [
            "checkerServiceRoleEA757245",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "checkerServiceRoleDefaultPolicyF32E024F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ContestTableCF479330",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "checkerServiceRoleDefaultPolicyF32E024F",
        "Roles": Array [
          Object {
            "Ref": "checkerServiceRoleEA757245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "checkerServiceRoleEA757245": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "checkerapigatewayE7DC5CA4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "checker31A6B3BF",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ddbstreamprocessingCB13F19C": Object {
      "DependsOn": Array [
        "ddbstreamprocessingServiceRoleDefaultPolicyA8E36B58",
        "ddbstreamprocessingServiceRoleDE732908",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "57db972f9028df9fe6a4faf5fb98f8d03cf3c3bfb0a4933be49637009f477497.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "TOPIC_ARN": Object {
              "Ref": "SubmissionNotifyTopic31317A4E",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "ddbstreamprocessingServiceRoleDE732908",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ddbstreamprocessingDynamoDBEventSourcetestContestTable1191BC9C6EF2B7B9": Object {
      "Properties": Object {
        "BatchSize": 5,
        "BisectBatchOnFunctionError": true,
        "DestinationConfig": Object {
          "OnFailure": Object {
            "Destination": Object {
              "Fn::GetAtt": Array [
                "deadLetterQueue3F848E28",
                "Arn",
              ],
            },
          },
        },
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "ContestTableCF479330",
            "StreamArn",
          ],
        },
        "FunctionName": Object {
          "Ref": "ddbstreamprocessingCB13F19C",
        },
        "MaximumRetryAttempts": 10,
        "StartingPosition": "TRIM_HORIZON",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ddbstreamprocessingServiceRoleDE732908": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ddbstreamprocessingServiceRoleDefaultPolicyA8E36B58": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SubmissionNotifyTopic31317A4E",
              },
            },
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "deadLetterQueue3F848E28",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ContestTableCF479330",
                  "StreamArn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ddbstreamprocessingServiceRoleDefaultPolicyA8E36B58",
        "Roles": Array [
          Object {
            "Ref": "ddbstreamprocessingServiceRoleDE732908",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "deadLetterQueue3F848E28": Object {
      "DeletionPolicy": "Delete",
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
